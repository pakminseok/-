#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

const int MAX_X_SIZE = 101;
const int MAX_Y_SIZE = 101;

struct DragonCurv{
	int row;
    int col;
    int direction;
    int generation;
};

bool in_curv_point[MAX_Y_SIZE][MAX_X_SIZE];
vector<DragonCurv> dragon_curv;
vector<int> direction;
//RIGHT, UP, LEFT, DOWN
int Dr[4] = {0, -1, 0, 1};
int Dc[4] = {1, 0, -1, 0};

int CountSquare()
{
    int cnt = 0;
    
    for(int row = 0; row < MAX_Y_SIZE-1; ++row)
    {
        for(int col = 0; col < MAX_X_SIZE-1; ++col)
        {
            if(in_curv_point[row][col] && in_curv_point[row][col+1] && in_curv_point[row+1][col] && in_curv_point[row+1][col+1])
                cnt++;
        }
    }
    return cnt;
}

void MakeDirection(int end_generation)
{
     for(int generation = 1; generation <= end_generation; ++generation)
     {
         int num_of_direction = direction.size();
         for(int index = num_of_direction -1; index >=0 ; --index)
             direction.push_back((direction[index]+1) % 4);
     }
}

void MakeCurv()
{
    while(!dragon_curv.empty())
    {
        DragonCurv curr_curv = dragon_curv.back();
        dragon_curv.pop_back();
        
        in_curv_point[curr_curv.row][curr_curv.col] = true;
       
        direction.clear();     
        direction.push_back(curr_curv.direction);
        
        MakeDirection(curr_curv.generation);
        
        for(int index = 0; index < direction.size(); ++index)
        {
            curr_curv.row += Dr[direction[index]];
            curr_curv.col += Dc[direction[index]];

            if(curr_curv.row >= 0 && curr_curv.row <= MAX_Y_SIZE - 1 && curr_curv.col >= 0 && curr_curv.col <= MAX_X_SIZE -1)
                in_curv_point[curr_curv.row][curr_curv.col] = true;
        }
    }
}

int main()
{
    memset(in_curv_point, false, sizeof(in_curv_point));

    int N;
    cin >> N;

    for(int curv = 1; curv <= N; ++curv)
    {
	int x, y, direction, generation;
	cin >> x >> y >> direction >> generation;

	dragon_curv.push_back({y, x, direction, generation});
    }

    MakeCurv();
    cout << CountSquare() << endl;

    return 0;
}

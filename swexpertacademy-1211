////SW Expert Academy 1211 - Ladder2

#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

int Ladder[100][100];
bool visited[100][100] = {0};

int solve()
{   
    int x = 0;
    int distance = 987654321;
    
    for(int curr_x =0; curr_x<100; ++curr_x)
    {
        if(Ladder[0][curr_x] == 0) continue;
        //시작이 0이면 skip
        int curr_row = 0;
        int curr_col = curr_x;
        int curr_distance=0;
 		
        while(curr_row < 100)
        {
             visited[curr_row][curr_col] = true;
       		 curr_distance += Ladder[curr_row][curr_col];
            //방향전환(좌)      
            if(Ladder[curr_row][curr_col-1] == 1 &&  visited[curr_row][curr_col-1]==false && (curr_col - 1 >= 0 && curr_col -1 < 100))
                curr_col--;
            //방향전환(우) 
            else if(Ladder[curr_row][curr_col+1] == 1 &&  visited[curr_row][curr_col+1]==false && (curr_col + 1 >= 0 && curr_col+1 < 100))
                curr_col++;
            //아래로 계속 이동
            else
                curr_row++;
        }
        //목적지 도달
        if(distance >= curr_distance)
        {
            distance = curr_distance;
            x = curr_x;
        }
        memset(visited, false, sizeof(visited));
    }
    return x;
}

int main()
{ 
    for(int t=1; t<=10; ++t)
    {
        int testCase;
        cin >> testCase;

        for(int i =0; i<100; ++i)
            for(int j=0; j<100; ++j)
                cin >> Ladder[i][j];
    
        cout <<"#"<<testCase<<" "<<solve()<<endl;
    }

    return 0;
}

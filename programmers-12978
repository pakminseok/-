#include <vector>
#include <queue>

using namespace std;

const int INF = 987654321;

int cost[51];

int solution(int N, vector<vector<int> > road, int K) {
    int answer = 0;

    vector<pair<int, int>> connection[N+1];
    for(int i = 0; i < road.size(); ++i)
    {
        connection[road[i][0]].push_back(make_pair(road[i][1], road[i][2]));
        connection[road[i][1]].push_back(make_pair(road[i][0], road[i][2]));
    } 
    
    for(int i = 1; i <= N; ++i)
        cost[i] = INF;
    
    queue<pair<int, int>> q; //cost, next_pos
    q.push(make_pair(0, 1));
    cost[1] = 0;
    
    while(!q.empty())
    {
        int time = q.front().first;
        int next_town = q.front().second;
        
        q.pop();
        
        if(time < cost[next_town])
            cost[next_town] = time;
        
        for(auto next_connection : connection[next_town])
        {
            if(cost[next_town] + next_connection.second < cost[next_connection.first])
                q.push(make_pair(cost[next_town] + next_connection.second, next_connection.first));
        }
    }
    
    for(int i = 1; i <= N; ++i)
    {
        if(cost[i] <= K)
            answer++;
    }
    
    return answer;
}

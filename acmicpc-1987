#include <iostream>
#include <cstring>
#include <algorithm>

#define MAX_SIZE 20
using namespace std;

char board[MAX_SIZE][MAX_SIZE];
bool visited_alphabet[26];

int R, C;
int Dr[4] = {-1, 1, 0, 0};
int Dc[4] = {0, 0, -1, 1};

int answer = 0;
void Move(int row, int col, int num_of_pass)
{
    answer = max(answer, num_of_pass);

    for(int direction = 0; direction < 4; ++direction)
    {
        int next_row = row + Dr[direction];
        int next_col = col + Dc[direction];
        
        if(next_row >= 0 && next_row <= R-1 && next_col >=0 && next_col <= C-1)
        {
            if(!visited_alphabet[board[next_row][next_col] - 'A'])
            {
                visited_alphabet[board[next_row][next_col] - 'A'] = true;
            	  Move(next_row, next_col, num_of_pass+1);
            	  visited_alphabet[board[next_row][next_col] - 'A'] = false;
            }
        }
    }
}

int main()
{
    memset(visited_alphabet, false, sizeof(visited_alphabet));
    cin >> R >> C;
    
    for(int row = 0; row < R; ++row)
        for(int col = 0; col < C; ++col)
            cin >> board[row][col];
    
    visited_alphabet[board[0][0] - 'A'] = true;
    Move(0, 0, 1);
    
    cout << answer << endl;
    return 0;
}

#include <iostream>
#include <algorithm>

#define MAX_SIZE 100

using namespace std;

long long D[MAX_SIZE + 1][MAX_SIZE + 1];

long long Direction(int row, int col)
{
	if (D[row][col] == -1LL)
		return 0;
	if (row == 0 && col == 0)
		return 1LL;
	if (row == 0)
		return D[row][col - 1];
	if (col == 0)
		return D[row - 1][col];

	return D[row][col - 1] + D[row - 1][col];
}

int main()
{
	int N, M;
	cin >> N >> M;

	int K;
	cin >> K;

	for (int k = 1; k <= K; ++k)
	{
		int x1, y1, x2, y2;
		cin >> x1 >> y1 >> x2 >> y2;

		if (x1 == 0 && x2 == 0)
			D[max(y1, y2)][0] = -1LL;
		else if (y1 == 0 && y2 == 0)
			D[0][max(x1, x2)] = -1LL;
		else
			x1^x2 ? D[y1][min(x1, x2)] = -1LL : D[min(y1, y2)][x1] = -1LL;
	}

	for (int i = 0; i <= M; ++i)
		for (int j = 0; j <= N; ++j)
			D[i][j] = Direction(i, j);


	cout << D[M][N] << endl;

	return 0;
}

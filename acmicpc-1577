#include <iostream>
#include <cstring>
#include <algorithm>
#define MAX_SIZE 101
using namespace std;

enum Direction {
	RIGHT = 0,
	DOWN = 1
};

bool is_open[MAX_SIZE][MAX_SIZE][2];
long long road[MAX_SIZE+1][MAX_SIZE+1];

int N, M, K;

int main()
{
	cin >> N >> M >> K;
	memset(is_open, true, sizeof(is_open));

	for (int index = 1; index <= K; ++index)
	{
		int a, b, c, d;
		cin >> a >> b >> c >> d;

		if (a==c)
			is_open[a][min(b,d)][RIGHT] = false;
		else
			is_open[min(a,c)][b][DOWN] = false;
	}

  road[0][0] = 1;
	
  for (int row = 0; row <= N; ++row)
	{
		for (int col = 0; col <= M; ++col)
		{
      if(is_open[row][col][DOWN])
        road[row+1][col] += road[row][col];
      if(is_open[row][col][RIGHT])
        road[row][col+1] += road[row][col];
    }
	}

	cout << road[N][M] << endl;
	return 0;
}

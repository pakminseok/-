#include <iostream>
#include <cstring>
#include <vector>

using namespace std;

struct Point{
    int row;
    int col;
};

int N, L, R;
int population[100][100];
bool visit[100][100];
vector<Point> union_country;
bool is_move = true;

int Dr[4] = {-1, 1, 0, 0};
int Dc[4] = {0, 0, -1, 1};

void MakeUnion(int row, int col)
{
    if(visit[row][col]) return;
 
    visit[row][col] = true;
    union_country.push_back({row, col});
	
    for(int direction = 0; direction < 4; ++direction)
    {
        int next_row = row + Dr[direction];
        int next_col = col + Dc[direction];
       	if(next_row < 0 || next_row > N-1 || next_col < 0 || next_col > N-1) continue;
        
        int diff_population = population[row][col] - population[next_row][next_col];
        if(diff_population < 0)
            diff_population = -diff_population;
        
        if(diff_population >= L && diff_population <= R) 
        {
            MakeUnion(next_row, next_col);
            is_move = true;
        }
    }
}

void Move()
{
    int sum = 0;
    int num_of_country = union_country.size();
    
    for(int index = 0; index < num_of_country; ++index)
        sum += population[union_country.at(index).row][union_country.at(index).col];
    
    int new_population = sum / num_of_country;
    
    for(int index = 0; index < num_of_country; ++index)
        population[union_country.at(index).row][union_country.at(index).col] = new_population;
    
    union_country.clear();
}

int main()
{
    cin >> N >> L >> R;
    
    for(int row=0; row < N; ++row)
        for(int col=0; col <N; ++col)
            cin >>population[row][col];
    
    int num_of_move = 0;
    
    while(is_move)
    {
        is_move = false;
        memset(visit, false, sizeof(visit));
        
        for(int row =0; row < N; ++row)
        {
            for(int col = 0; col <N; ++col)
            {
                if(!visit[row][col])
                {
                    MakeUnion(row, col);
                    Move();
                }
            }
        }
        
        if(is_move)
            num_of_move++;
    }
    
    cout<< num_of_move << endl;
    
  	return 0;
}

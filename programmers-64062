#include <vector>
#include <algorithm>

using namespace std;

bool CanJump(vector<int>& stones, int k, int num_of_pass)
{
    int num_of_jump = 0;
        
    for(int i = 0; i <stones.size(); ++i)
    {
        (stones[i]-(num_of_pass-1) <= 0) ? num_of_jump++ : num_of_jump = 0;
            
        if(num_of_jump == k) return false;
    }
    return true;
}

int solution(vector<int> stones, int k) {
    int answer = 0;
    
    int max_pass = *max_element(stones.begin(), stones.end());
    int min_pass = *min_element(stones.begin(), stones.end());
    
    int num_of_pass = (max_pass + min_pass) / 2;
    while(max_pass - min_pass >= 0)
    {
        if(CanJump(stones, k, num_of_pass))
        {
            answer = num_of_pass;
            min_pass = num_of_pass + 1;
        }
        else
            max_pass = num_of_pass-1;
        
        num_of_pass = (max_pass + min_pass) / 2;
    }
    
    return answer;
}

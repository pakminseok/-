#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int MAX_SIZE = 10;
int population[MAX_SIZE];
bool connection[MAX_SIZE][MAX_SIZE] = {false};
bool visit[MAX_SIZE] = {false};
vector<int> choose;
int N, answer;

int SumOfPopulation(vector<int> group)
{
    int sum = 0;
    for(auto city : group)
        sum += population[city];
    return sum;
}

bool Connect(vector<int> group)
{
    if(group.size() == 1) return true;
    
    bool check[MAX_SIZE] = {false};
    for(int city : group)
        check[city] = true;
    
    queue<int> group_check;
    group_check.push(group[0]);
    while(!group_check.empty())
    {
        int curr_city = group_check.front();
        group_check.pop();
        
        for(int index = 0; index < group.size(); ++index)
        {
            if(connection[curr_city][group[index]] && check[group[index]])
            {
                group_check.push(group[index]);
                check[group[index]] = false;
            }
        }
    }
    
    for(int city : group)
    {
        if(check[city])
            return false;
    }
    return true;
}

void Choose(int curr_index, int num_of_city, int end)
{
    if(num_of_city <= end && num_of_city >= 1)
    {
        vector<int> first, second;
        for(int index = 0; index < N; ++index)
        {
            if(visit[index])
                first.push_back(index);
            else
                second.push_back(index);
        }
        if(Connect(first) && Connect(second))
        {
            int first_sum = SumOfPopulation(first);
            int second_sum =SumOfPopulation(second);
            
            int sum_diff = (first_sum < second_sum) ? second_sum - first_sum : first_sum - second_sum;
            
            if(answer == -1)
                answer = sum_diff;
            else
                answer = (answer > sum_diff) ? sum_diff : answer;
        }
        
        if(num_of_city == end) return;
    }
    
    if(curr_index == N) return;
    
    for(int city_index = curr_index; city_index < N; ++city_index)
    {
        if(visit[city_index]) continue;
        visit[city_index] = true;
        Choose(city_index + 1, num_of_city + 1, end);
        visit[city_index] = false;
    }
}

int main()
{
    answer = -1;
    cin >> N;
    for(int city_index = 0; city_index < N; ++city_index)
        cin >> population[city_index];
    for(int city_index = 0; city_index < N; ++city_index)
    {
        int num_of_near;
        cin >> num_of_near;
        while(num_of_near > 0)
        {
            int near_index;
            cin >> near_index;
            connection[city_index][near_index-1] = true;
            connection[near_index-1][city_index] = true;
            num_of_near--;
        }
    }
    
    Choose(0, 0, N/2);
    cout << answer << endl;
    return 0;
}

#include <vector>

using namespace std;

int N, M;

vector<vector<int>> MakeRotation(vector<vector<int>> key)
{
    vector<vector<int>> rotate;
    for(int col = 0; col < M; ++col)
    {
        vector<int> rows_of_rotate;
        for(int row = M-1; row >=0; --row)
        {
            rows_of_rotate.push_back(key[row][col]);
        }
        rotate.push_back(rows_of_rotate);
    }
    
    return rotate;
}

vector<vector<int>> Magnify(vector<vector<int>> lock)
{
    vector<vector<int>> Lock;
    int lock_size = lock.size();
    for(int row = 0; row < 3*lock_size; ++row)
    {
        vector<int> rows_of_Lock;
        for(int col = 0; col < 3*lock_size; ++col)
        {
            if(row >= lock_size && row <2*lock_size && col >= lock_size && col <2*lock_size)
                rows_of_Lock.push_back(lock[row-lock_size][col-lock_size]);
            else
                rows_of_Lock.push_back(0);
        }
        Lock.push_back(rows_of_Lock);
    }
    return Lock;
}

bool Match(int row_of_lock, int col_of_lock, vector<vector<int>> lock, vector<vector<int>> key)
{
    int row_of_key = 0;
    int col_of_key = 0;
    
    for(int row = row_of_lock; row < row_of_lock + M; ++row)
    {
        for(int col = col_of_lock; col < col_of_lock + M; ++col)
        {
            if(row >= N && col >= N && row <2*N && col < 2*N)
            {
               if (!lock[row][col] && key[row_of_key][col_of_key]) lock[row][col] = 1;
                else if (lock[row][col] && key[row_of_key][col_of_key]) return false;
                    
            }
            col_of_key++;
            if(col_of_key == M) 
            {
                col_of_key = 0;
                ++row_of_key;
            }
        }   
    }

    for(int row = N; row < 2*N; ++row)
        for(int col = N; col < 2*N; ++col)
            if(!lock[row][col]) 
                return false;

    return true;
}

bool solution(vector<vector<int>> key, vector<vector<int>> lock) {
    N = lock.size();
    M = key.size();
    
    vector<vector<int>> lock_magnified = Magnify(lock);
    int lock_size = lock_magnified.size();
   
    
    for(int row = 0; row + M <= lock_size; ++row)
    {
        for(int col = 0; col + M <= lock_size; ++col)
        {
            for(int rotation = 0; rotation < 4; ++rotation)
            {
                key = MakeRotation(key);
                if(Match(row, col, lock_magnified, key))
                    return true;
            }
        }
    }
    
    return false;
}

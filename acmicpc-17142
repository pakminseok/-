#include <iostream>
#include <vector>
#include <queue>
#include <cstring>

#define INF 987654321
#define MAX_SIZE_LAB 50
#define MAX_SIZE_VIRUS 10

using namespace std;

struct Point{
    int row;
    int col;
};

int Lab[MAX_SIZE_LAB][MAX_SIZE_LAB];
int spread_time[MAX_SIZE_LAB][MAX_SIZE_LAB];
int N, M;
vector<Point> virus;
bool active[MAX_SIZE_VIRUS];
int num_of_blank;
int answer;

int Dr[4] = {-1, 1, 0 ,0};
int Dc[4] = {0, 0, -1, 1};

void SpreadVirus(queue<Point> viruses)
{
    int num_of_remain_blank = num_of_blank;
    int total_time = 0;
    
    while(!viruses.empty())
    {
        int row = viruses.front().row;
        int col = viruses.front().col;
        viruses.pop();
        
        for(int direction = 0; direction < 4; ++direction)
        {
            int next_row = row + Dr[direction];
            int next_col = col + Dc[direction];
            
            if(next_row >=0 && next_row <= N-1 && next_col >=0 && next_col <= N-1)
            {
                if(Lab[next_row][next_col] != 1 && spread_time[next_row][next_col] == -1)
                {
                    spread_time[next_row][next_col] = spread_time[row][col] + 1;
                    if(Lab[next_row][next_col] == 0)
                    {
                        num_of_remain_blank = num_of_remain_blank - 1;
                        total_time= spread_time[next_row][next_col];
                    }
                    viruses.push({next_row, next_col});
                }
            }
        }
    }
    if(num_of_remain_blank == 0)
        answer = (answer > total_time ? total_time : answer);
}

void ActivateVirus(int index_of_virus, int cnt)
{
    if(cnt == M)
    {
        memset(spread_time, -1, sizeof(spread_time));
        queue<Point> active_virus;
        for(int index = 0; index < virus.size(); ++index)
        {
            if(active[index])
            {
                active_virus.push(virus[index]);
                spread_time[virus[index].row][virus[index].col] = 0;
            }
        }
        SpreadVirus(active_virus);
        return;
    }
    
    else
    {
        for(int index = index_of_virus; index < virus.size(); ++index)
        {
            active[index] = true;
            ActivateVirus(index + 1, cnt + 1);
            active[index] = false;
        }
    }
}

int main()
{
    num_of_blank = 0;
    answer = INF;
    virus.clear();
    memset(active, false, sizeof(active));
    
    cin >> N >> M;
    
    for(int row = 0; row < N; ++row)
    {
        for(int col =0; col < N; ++col)
        {
            cin >> Lab[row][col];
            if(Lab[row][col] == 0)
                num_of_blank++;
            else if(Lab[row][col] == 2)
                virus.push_back({row, col});
        }
    }
    
    ActivateVirus(0, 0);
    
    if(answer == INF)
        cout << -1 << endl;
    else
        cout << answer << endl;
	
	return 0;
}

#include <iostream>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAX_SIZE = 100;
int location[MAX_SIZE][MAX_SIZE];
bool visit[MAX_SIZE][MAX_SIZE];
int N;
int max_num_of_safe_area;
int Dr[4] = {-1, 1, 0, 0};
int Dc[4] = {0, 0, -1, 1};

void Move(int row, int col, int rain_hight)
{
    visit[row][col] = true;
    
    for(int direction = 0; direction < 4; ++direction)
    {
        int next_row = row + Dr[direction];
        int next_col = col + Dc[direction];
        
        if(next_row>=0 && next_row <= N-1 && next_col >=0 && next_col <= N-1)
        {
			if(!visit[next_row][next_col] && location[next_row][next_col] > rain_hight)
                Move(next_row, next_col, rain_hight);
        }
    }
}

void CheckSafeArea(int rain_hight)
{
    memset(visit, false, sizeof(visit));
    int num_of_safe_area = 0;
    
    for(int row = 0; row < N; ++row)
    {
        for(int col = 0; col < N; ++col)
        {
            if(location[row][col] >rain_hight && !visit[row][col])
            {
                Move(row, col, rain_hight);
                num_of_safe_area++;
            }
        }
    }
    
    max_num_of_safe_area = max(max_num_of_safe_area, num_of_safe_area);
}

int main()
{
    max_num_of_safe_area = 0;
    int min_hight = 100;
    int max_hight = 1;
    cin >> N;
    for(int row = 0; row < N; ++row)
    {
        for(int col = 0; col < N; ++col)
        {
            cin >> location[row][col];
            min_hight = min(min_hight, location[row][col]);
            max_hight = max(max_hight, location[row][col]);
        }
    }
    
    for(int rain_hight = min_hight - 1; rain_hight <= max_hight; ++rain_hight)
    	CheckSafeArea(rain_hight);
    
    cout << max_num_of_safe_area << endl;
    return 0;
}

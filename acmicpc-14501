#include <iostream>

using namespace std;

const int MAX_DAY = 15;
int N;
int cost_time[MAX_DAY];
int payment[MAX_DAY];
int max_payment;

void DFS(int curr_day, int total_payment, int before_day)
{
    if(curr_day >= N)
    {
        if(curr_day > N)
          total_payment -= payment[before_day];
        max_payment = (max_payment < total_payment) ? total_payment : max_payment;
        return;
    }
    
    for(int day = curr_day; day < N; ++day)
    {
        DFS(day + cost_time[day], total_payment + payment[day], day);
    }
}

int main()
{
    max_payment = 0;
	  cin >> N;
    for(int day = 0; day < N; ++day)
        cin >> cost_time[day] >> payment[day];
    
    DFS(0, 0, 0);
    
    cout << max_payment << endl;
	  return 0;
}

---------------------------
#include <iostream>
#include <algorithm>

using namespace std;

const int MAX_DAY = 16;

int main()
{
    int max_payment = 0;
	
    int N;
	cin >> N;
    
    int cost_time[MAX_DAY + 1];
    int payment[MAX_DAY + 1];
    int total_payment[MAX_DAY + 1] = {0};
    int answer = 0;
    
    for(int day = 1; day <= N; ++day)
        cin >> cost_time[day] >> payment[day];
 
    for(int curr_day = 1; curr_day <= N+1; ++curr_day)
    {
        for(int before_day = 1; before_day < curr_day; ++before_day)
        {
            if(curr_day - before_day >= cost_time[before_day])
            	total_payment[curr_day] = max(total_payment[before_day] + payment[before_day], total_payment[curr_day]);
        }
    }
    cout << total_payment[N+1] << endl;
    return 0;
}

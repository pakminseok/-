#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

int A, B;
string answer;
bool visit[10000];
string MakeInstuction()
{
    memset(visit, false, sizeof(visit));
    queue<pair<int, string>> number_and_instruction;
    
    number_and_instruction.push(make_pair(A, ""));
    while(!number_and_instruction.empty())
    {
        int curr_number = number_and_instruction.front().first;
        string instructions = number_and_instruction.front().second;
        number_and_instruction.pop();
        
        if(curr_number == B)
            return instructions;
        
        int next_number = (curr_number*2)%10000;
    	  if(!visit[next_number])
        {
            visit[next_number] = true;
            number_and_instruction.push(make_pair(next_number, instructions+"D"));
        }
        
        next_number = (curr_number == 0) ? 9999 : curr_number-1;
    	  if(!visit[next_number])
        {
            visit[next_number] = true;
            number_and_instruction.push(make_pair(next_number, instructions+"S"));
        }
       
        next_number = (curr_number < 1000) ? curr_number*10 : (curr_number%1000)*10 + curr_number/1000;
    	  if(!visit[next_number])
        {
            visit[next_number] = true;
            number_and_instruction.push(make_pair(next_number, instructions+"L"));
        }
        
       	next_number = (curr_number - curr_number%10)/10+ (curr_number%10)*1000;
    	  if(!visit[next_number])
        {
            visit[next_number] = true;
            number_and_instruction.push(make_pair(next_number, instructions+"R"));
        }
    }
}

int main()
{	
    int T;
    cin >> T;
    for(int test_case = 1; test_case <= T; ++test_case)
    {
        cin >> A >> B;
        cout << MakeInstuction() << endl;
    }
	return 0;
}
